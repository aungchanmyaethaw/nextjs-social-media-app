generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  username      String?   @unique
  emailVerified DateTime?
  image String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts Account[]
  sessions Session[]
  posts Post[]
  favourites Favourite[]
  comments Comment[]
  hideposts Hidepost[]
  saves Save[]



}

model Post{

  id String @id @default(cuid())
  caption String
  authorId String
  author User @relation(fields: [authorId],references: [id],onDelete: Cascade)
  onlyMe Boolean @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  favourites Favourite[] 
  images Image[]
  comments Comment[]
  hideposts Hidepost[]
  save Save[]

}

model Hidepost{

id String @id @default(cuid())
postId String
post Post @relation(fields: [postId],references: [id],onDelete: Cascade)
userId String
user User @relation(fields: [userId],references: [id],onDelete: Cascade)
createdAt     DateTime  @default(now())
updatedAt     DateTime  @updatedAt 

}

model Save{

id String @id @default(cuid())
postId String
post Post @relation(fields: [postId],references: [id],onDelete: Cascade)
userId String 
user User @relation(fields: [userId],references: [id],onDelete: Cascade)
createdAt     DateTime  @default(now())
updatedAt     DateTime  @updatedAt 

}

model Image{

  id String @id @default(cuid())
  publicId String
  url String
  postId String
  post Post @relation(fields: [postId],references: [id],onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt 

}

model Favourite{

id String @id @default(cuid())
postId String
post Post @relation(fields: [postId],references: [id],onDelete: Cascade)
userId String 
user User @relation(fields: [userId],references: [id],onDelete: Cascade)
createdAt     DateTime  @default(now())
updatedAt     DateTime  @updatedAt 

}

model Comment{
 id String @id @default(cuid())
 comment String
  postId String
post Post @relation(fields: [postId],references: [id],onDelete: Cascade)
userId String
user User @relation(fields: [userId],references: [id],onDelete: Cascade)
createdAt     DateTime  @default(now())
updatedAt     DateTime  @updatedAt 
}

model Account {
  id                 String  @id @default(cuid())
  userId             String 
  type               String
  provider           String
  providerAccountId  String 
  refresh_token      String?
  access_token       String? 
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? 
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique 
  userId       String  
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
 
}